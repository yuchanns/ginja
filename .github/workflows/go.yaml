name: Go Binding

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
  workflow_dispatch:
    inputs:
      tag:
        description: 'Version tag to release'
        required: true

jobs:
  build:
    runs-on: ${{ matrix.platform.os }}
    strategy:
      fail-fast: false
      matrix:
        platform:
          - os: ubuntu-latest
            artifact: libminijinja_c.linux.amd64.so.zst
          - os: ubuntu-24.04-arm
            artifact: libminijinja_c.linux.arm64.so.zst
          - os: macos-latest
            artifact: libminijinja_c.darwin.arm64.dylib.zst
          - os: windows-latest
            artifact: minijinja_c.windows.amd64.dll.zst
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-go@v5
        with:
          go-version: 'stable'
      - uses: actions-rust-lang/setup-rust-toolchain@v1
        if: ${{ matrix.platform.os == 'windows-11-arm' }}
        with:
          toolchain: stable
      - name: Install dependencies (Windows ARM)
        if: ${{ matrix.platform.os == 'windows-11-arm' }}
        run: |
          choco install -y zstandard
      - name: Install build tools (Linux)
        if: runner.os == 'Linux'
        run: |
          sudo apt-get update
          sudo apt-get install -y zstd
      - name: Install build tools (macOS)
        if: runner.os == 'macOS'
        run: |
          brew install zstd libffi
      - name: Install build tools (Windows)
        if: runner.os == 'Windows'
        uses: ilammy/msvc-dev-cmd@v1
      - name: Build and test
        shell: bash
        run: |
          if [ "${{ runner.os }}" == "Windows" ]; then
            # https://github.com/ilammy/msvc-dev-cmd/issues/25
            rm /usr/bin/link.exe
          fi
          make tests
        env:
          CGO_ENABLE: 0
          RELEASE_MODE: ${{ github.event_name == 'workflow_dispatch' && '1' || '0' }}
      - name: Upload artifacts
        if: github.event_name == 'workflow_dispatch'
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.platform.artifact }}
          path: internal/embed/${{ matrix.platform.artifact }}
          retention-days: 7

  release:
    runs-on: ubuntu-latest
    needs: [ build ]
    permissions:
      contents: write
    if: github.event_name == 'workflow_dispatch'
    steps:
      - uses: actions/checkout@v4
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: internal/embed/
          merge-multiple: true
      - name: Create Release Branch
        run: |
          # Create a temporary release branch
          RELEASE_BRANCH="release-${{ github.event.inputs.tag }}"
          git checkout -b $RELEASE_BRANCH

          # Force add .zst files to staging area (they are ignored by .gitignore)
          git add -f internal/embed/*.zst
      - name: Commit Prebuilt Binaries
        uses: qoomon/actions--create-commit@v1
        with:
          message: "Add prebuilt binaries for release ${{ github.event.inputs.tag }}"
      - name: Push Release Branch
        run: |
          RELEASE_BRANCH="release-${{ github.event.inputs.tag }}"
          git push origin $RELEASE_BRANCH
      - name: Create Release with GitHub API
        uses: actions/github-script@v7
        with:
          script: |
            const release = await github.rest.repos.createRelease({
              owner: context.repo.owner,
              repo: context.repo.repo,
              tag_name: '${{ github.event.inputs.tag }}',
              target_commitish: 'release-${{ github.event.inputs.tag }}',
              name: 'Release ${{ github.event.inputs.tag }}',
              draft: false,
              generate_release_notes: true
            });

